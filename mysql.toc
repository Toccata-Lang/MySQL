
(defprotocol SQLConnection
  (get-error [_])
  (get-errno [_])
  (query [_ query-str]
    ;; TODO: maybe make this a safe string type
    (assert (instance? String query-str)))
  )

(inline C "

#include <mysql.h>

void close_mysql_conn(void *ptr) {
  fprintf(stderr, \"Connection closed\\n\");
  mysql_close((MYSQL *)ptr);
}

void free_mysql_results(void *ptr) {
  fprintf(stderr, \"Results freed\\n\");
  mysql_free_result((MYSQL_RES *)ptr);
}
")

(defn init* []
  (inline C Maybe "
  MYSQL *con = mysql_init(NULL);
  if (con == NULL) {
    return(nothing);
  } else {
    Value *opaque = opaqueValue((void *)con, close_mysql_conn);
    return(maybe((List *)0, (Value *)0, opaque));
  }
"))

(defn connect* [mysql host user password db port unix-socket flags]
  ;; Private function. Use 'connect' insteaad.
  (assert (instance? Opaque mysql))
  (assert (instance? String host))
  (assert (instance? String user))
  (assert (instance? String password))
  (assert (instance? String db))
  (assert (instance? Integer port))
  (assert (instance? String unix-socket))
  (assert (instance? Integer flags))

  (inline C Maybe "
  MYSQL *conn = (MYSQL *)((Opaque *)mysql_0)->ptr;

  String *host;
  if (((String *)host_1)->len > 0) {
    host = nullTerm(host_1);
  } else {
    host = NULL;
    dec_and_free(host_1, 1);
  }

  String *user;
  if (((String *)user_2)->len > 0) {
    user = nullTerm(user_2);
  } else {
    user = NULL;
    dec_and_free(user_2, 1);
  }

  String *pwd;
  if (((String *)password_3)->len > 0) {
    pwd = nullTerm(password_3);
  } else {
    pwd = NULL;
    dec_and_free(password_3, 1);
  }

  String *db;
  if (((String *)db_4)->len > 0) {
    db = nullTerm(db_4);
  } else {
    db = NULL;
    dec_and_free(db_4, 1);
  }

  String *socket;
  if (((String *)unix_socket_6)->len > 0) {
    socket = nullTerm(unix_socket_6);
  } else {
    socket = NULL;
    dec_and_free(unix_socket_6, 1);
  }

  if (conn == NULL) {
    dec_and_free(mysql_0, 1);
    if (host) dec_and_free((Value *)host, 1);
    if (user) dec_and_free((Value *)user, 1);
    if (pwd) dec_and_free((Value *)pwd, 1);
    dec_and_free(port_5, 1);
    if (socket) dec_and_free((Value *)socket, 1);
    dec_and_free(flags_7, 1);
    return(nothing);
  } else {
    if (mysql_real_connect(conn, host ? host->buffer : NULL,
                           user ? user->buffer : NULL,
                           pwd ? pwd->buffer : NULL,
                           db ? db->buffer : NULL,
                           ((Integer *)port_5)->numVal,
                           socket ? socket->buffer : NULL,
                           ((Integer *)flags_7)->numVal) == NULL) {
      dec_and_free(mysql_0, 1);
      if (host) dec_and_free((Value *)host, 1);
      if (user) dec_and_free((Value *)user, 1);
      if (pwd) dec_and_free((Value *)pwd, 1);
      dec_and_free(port_5, 1);
      if (socket) dec_and_free((Value *)socket, 1);
      dec_and_free(flags_7, 1);
      return(nothing);
    } else {
      if (host) dec_and_free((Value *)host, 1);
      if (user) dec_and_free((Value *)user, 1);
      if (pwd) dec_and_free((Value *)pwd, 1);
      dec_and_free(port_5, 1);
      if (socket) dec_and_free((Value *)socket, 1);
      dec_and_free(flags_7, 1);
      return(maybe((List *)0, (Value *)0, mysql_0));
    }
  }
"))

(defn mysql-get-error [conn]
  (assert (instance? Opaque conn))
  (inline C String "
  MYSQL *conn = (MYSQL *)((Opaque *)conn_0)->ptr;
  Value *err_string = stringValue((char *)mysql_error(conn));
  dec_and_free(conn_0, 1);
  return(err_string); 
"))

(defn mysql-get-errno [conn]
  (assert (instance? Opaque conn))
  (inline C Integer "
  MYSQL *conn = (MYSQL *)((Opaque *)conn_0)->ptr;
  Value *err_num = integerValue(mysql_errno(conn));
  dec_and_free(conn_0, 1);
  return(err_num); 
"))

(defn mysql-query [conn query-str]
  (assert (instance? Opaque conn))
  (assert (instance? String query-str))
  (inline C Maybe "
  char *buffer;
  int64_t len;

  if (query_str_1->type == StringBufferType) {
    buffer = ((String *)query_str_1)->buffer;
    len = ((String *)query_str_1)->len;
  } else if (query_str_1->type == SubStringType) {
    buffer = ((SubString *)query_str_1)->buffer;
    len = ((SubString *)query_str_1)->len;
  }
  MYSQL *conn = (MYSQL *)((Opaque *)conn_0)->ptr;

  int64_t result = mysql_real_query(conn, buffer, len);
  dec_and_free(conn_0, 1);
  dec_and_free(query_str_1, 1);
  if (result == 0) {
    return(maybeNothing); 
  } else {
    return(nothing);
  }
"))

(defn mysql-store-result [conn]
  (assert (instance? Opaque conn))
  (inline C Maybe "
  MYSQL *conn = (MYSQL *)((Opaque *)conn_0)->ptr;

  MYSQL_RES *results = mysql_store_result(conn);
  dec_and_free(conn_0, 1);
  if (results == NULL) {
    return(nothing); 
  } else {
    Value *opaque = opaqueValue((void *)results, free_mysql_results);
    return(maybe((List *)0, (Value *)0, opaque));
  }
"))

(defn mysql-field-count [conn]
  (assert (instance? Opaque conn))
  (inline C Integer "
  MYSQL *conn = (MYSQL *)((Opaque *)conn_0)->ptr;

  int64_t fieldCount = mysql_field_count(conn);
  dec_and_free(conn_0, 1);
  return(integerValue(fieldCount)); 
"))

(defprotocol MySQL
  (connect [conn host user])
  (connect [conn host user password])
  (connect [conn host user password db])
  (connect [conn host user password db port])
  (connect [conn host user password db port unix-socket])
  (connect [conn host user password db port unix-socket flags]))

(defn mysql-fetch-row [result]
  (assert (instance? Opaque result))
  (assert-result row (instance? Maybe row))

  (inline C Maybe "
  MYSQL_RES *result = (MYSQL_RES *)((Opaque *)result_0)->ptr;
  Vector *rowVect = empty_vect;

  unsigned fieldCount = mysql_num_fields(result);
  MYSQL_ROW row = mysql_fetch_row(result);
  if (row != NULL)
  {
    unsigned long *lengths = mysql_fetch_lengths(result);
    for(unsigned i = 0; i < fieldCount; i++)
    {
      String *strVal = malloc_string(lengths[i]);
      strncpy(strVal->buffer, row[i], lengths[i]);
      rowVect = mutateVectConj(rowVect, (Value *)strVal);
    }
    dec_and_free(result_0, 1);
    return(maybe((List *)0, (Value *)0, (Value *)rowVect));
  } else {
    dec_and_free(result_0, 1);
    return(nothing);
  }
"))

(defn extract-all-results [results-vect mysql-results]
  (assert (instance? Vector results-vect))
  (assert (instance? Opaque mysql-results))
  (either (map (mysql-fetch-row mysql-results)
               (fn [row]
                 (extract-all-results (conj results-vect row)
                                      mysql-results)))
          results-vect))

(deftype MySQLConnection [conn]
  Stringable
  (string-list [_] (list "<MySQLConnection>"))

  SQLConnection
  (get-error [_]
    (mysql-get-error conn))

  (get-errno [_]
    (mysql-get-errno conn))
  
  (query [_ query-str]
    (for [_ (mysql-query conn query-str)
          :let [field-count (mysql-field-count conn)]
          results (or (and (= 0 (mysql-field-count conn))
                           (maybe []))
                      (map (mysql-store-result conn)
                           (partial extract-all-results [])))]
      results))

  MySQL
  (connect [_ host user]
   (connect* conn host user "" "" 0 "" 0))

  (connect [_ host user password]
   (connect* conn host user password "" 0 "" 0))

  (connect [_ host user password db]
   (connect* conn host user password db 0 "" 0))

  (connect [_ host user password db port]
   (connect* conn host user password db port "" 0))

  (connect [_ host user password db port unix-socket]
   (connect* conn host user password db port unix-socket 0))

  (connect [_ host user password db port unix-socket flags]
   (connect* conn host user password db port unix-socket flags))
  )

(def CLIENT_FOUND_ROWS
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_FOUND_ROWS}"))
(def CLIENT_NO_SCHEMA
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_NO_SCHEMA}"))
(def CLIENT_COMPRESS
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_COMPRESS}"))
(def CLIENT_IGNORE_SPACE
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_IGNORE_SPACE}"))
(def CLIENT_LOCAL_FILES
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_LOCAL_FILES}"))
(def CLIENT_MULTI_STATEMENTS
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_MULTI_STATEMENTS}"))
(def CLIENT_MULTI_RESULTS
  (inline C Integer "(Value *)&(Integer){IntegerType,-1,CLIENT_MULTI_RESULTS}"))

(defn init []
  (map (init*) MySQLConnection))

(main [_]
      (for [conn (init)
            _ (or (connect conn "localhost" "root")
                  (do
                    (println "err:" (get-error conn))
                    nothing))
            :let [_ (println "Connected to DB" conn)]
            _ (query conn "SHOW DATABASES;")]
        (println (flatten _)))

      (println)
      (for [conn (init)
            _ (or (connect conn "localhost" "root" "bogus")
                  (do
                    (println "err:" (get-errno conn))
                    (println "err:" (get-error conn))
                    nothing))]
        (println "Connected to DB" conn))
      (println)
)
